# Задача No49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были запущены на круговые орбиты.
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. 
# Гарантируется, что самая далекая планета ровно одна
# Пример ввода и вывода данных представлены на следующем слайде
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]



# orbP = list(filter( lambda x : x[0]!=x[1], orbits)) # отбираем только те, чьи элипсы - не круги (разные полуоси)
# print(orbP) # контрольная печать отобранного
# orbS=list(map(lambda x: x[0]*x[1], orbP)) # строим список из величин площадей квадартов полуось*полуось
# print(orbS) # контрольная печать списка числовых величин, пропорциональных площади эллипсов
# maxS = max(orbS) # находим максимальное значение в списке значений площадей
# print(maxS) # печать максимального
# orbBest = list (filter( lambda x: x[0]*x[1]== maxS, orbP)) # отбираем в новый список орбиты с макс значением ...
# print(orbBest)




orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(max(orbits, key = lambda x : x[0] * x[1]*(x[0]!=x[1])))